JDBC:
======
Java Database connectivity.

--java mostly used in industry to develop Business application.

--common and general things required in a business application.

1. maintaining the business data permanently in a secure and easily retrival manner.

2. processing the data according to the business rule.

3. presenting the data to the user in user understandable format.


--we store the business data for a typicall business application inside the RDBMS s/w.

nosql (mono db   ---> json data )

Q/ Why Java and DB communication is required ?

A/- DBMS are excellent in data storege in secure and easily retrival manner but it is very poor in processing and presenting the data in user-understandable format.

--java is excellent in processing the data and presenting the data but java is very poor in storing the data(in java we can store the data using Serialization processing).


--so inorder to develop a powerfull business application we need to communicate our java application with the DB server.

Q/- How Java-DB communication is possible ?

A/-

--Java App can do any task only through the method calls and objects, these method calls and objects are not directly understandable to the DB s/w.

--and the DB can understand only sql, Java compiler does not accept the sql syntax directly.

--inspite of heteregenious platform Java-DB communication is possible through the JDBC.


                 translator
chinese ---------------- Russian 

                 Jdbc driver s/w
Java ------------------- DB  


--JDBC is a technology that enables any kind of java application to communicate with any kind of DB s/w in a standard manner.

JDBC technology is given by sun-microsystem 

JDBC technology comes in the form of a specification (it is documentation which describes rules and guidelines to develop a perticular s/w  "Jdbc driver s/w").

--Jdbc driver s/w is the implementation of the Jdbc specification , which will act as a translator s/w to communicate our java app with the DB s/w.



--JDBC specification will be implemented by the DB verndor or any 3rd party vendor also and develop the  "Jdbc driver s/w"

--each DB s/w have their own JDBC driver s/w, this driver s/w comes in the form of a .jar file.

Mysql : mysql-connector.jar

Oracle : ojdbc6.jar

Postgres : postgress.jar 
 
--Java developer need to get/download the jdbc driver related jar file from the internet, and in order to work with that jar file, we need to set that jar file inside the classpath of our application.


Java application {

classes (method)
interface 

}

---compile all the .java files ------> .class files -----> zip all the .class --inside a .jar file.



ratanapp{ A.java, B.java, Demo.java}---> make them a1.jar file.


class X  {  // here we need to set the a1.jar file in the classpath of our application

main(){
A a1 = new A();

}

}


--in order to communicate java application and DB server , Java developer need the "jdbc driver s/w" and 
"jdbc api" to perform the DB operation from the Java application.

--jdbc api comes in the form of 2 packages:

1.java.sql package

2. javax.sql package


JDBC client:
===========

--In java-DB communication , our Java application will act as a client becoz Java application needs the services of the DB server. So our Java application is a JDBC client.


Responsibility of the JDBC client:
==========================

1. Requesting the DB connection.

2. Submitting the appropriate SQL statement to the DB server in the form of String.

3.Processing the result given by the DB server.

4.Dealing with exceptions if any.

5.Managing the transactions whenever it is required.

6.closing the connection once done with the DB operation.


JDBC driver :
==========

--it is a translation s/w written in Java according to the JDBC specificaiton (it comes in the form of Jar file.)

Responsibility of JDBC driver s/w :
===========================

1. establishing the Connection.

2. receiving the JDBC method calls (java method call ) and translate them into DBMS understandable format.(SQL) and forward them to the DB s/w.

3.Translating the DB s/w given result into the Java format (Java objects) and returns that object toe hte JDBC client.


step of connect our java application with the DB server (mysql):
==================================================

1. download/get the jdbc driver related jar file (mysql-connector.jar) and set that jar file inside the classpath of our application.

2.Load the Driver related main class into the memory.

3. prepare the Connection string.

4. establish the connection.

5.after performing the CRUD operation close the connection.

Setting the jar file in the classpath of our application:
----------------------------------------------------------------

rightclick on the project----> build path ----> configure build path---->libraries---->Classpath---->Add External jars--->select the downloaded jar file ----> apply and close.



Demo.java:
--------------

package jdbcproject1;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class Demo {

	public static void main(String[] args) {

		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		String url = "jdbc:mysql://localhost:3306/web19sb101db";
		
		try {
		 Connection conn=  DriverManager.getConnection(url, "root", "root");
		 
		 if(conn != null)
			 System.out.println("connected...");
		 
		 
		 
		}catch(SQLException e) {
			
			e.printStackTrace();
		}
		
		
		
	}

}
